[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/utils/config.py:__version__"
]

# Optional: Set to True to allow changing files when bumping version
update_changelog_on_bump = true # creates or updates CHANGELOG.md automatically

# Optional: Customize the message used for version bumps
bump_message = "chore(release): bump version to $new_version"

# Optional: Require all commits to follow conventional commit rules
check_consistency = true

# Optional: Define changelog generation settings
changelog_file = "CHANGELOG.md"

# Optional: Define the commit message format
commit_message_format = "{type}({scope}): {subject}"

# Optional: Define the types of commits and their descriptions
[tool.commitizen.types]
feat = { description = "A new feature" }
fix = { description = "A bug fix" }
docs = { description = "Documentation only changes" }
style = { description = "Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)" }
refactor = { description = "A code change that neither fixes a bug nor adds a feature" }
test = { description = "Adding missing tests or correcting existing tests" }
chore = { description = "Changes to the build process or auxiliary tools and libraries such as documentation generation" }

# Optional: Define scopes for commits
[tool.commitizen.scopes]
core = { description = "Core functionality" }
ui = { description = "User interface changes" }
api = { description = "API related changes" }
# Optional: Define custom commit types
[tool.commitizen.custom_types]
custom = { description = "Custom type for specific use cases" }
